{"version":3,"sources":["TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","todo","handleChange","removeTodo","map","className","completed","onChange","id","checked","title","DeleteOutlined","onClick","App","useState","setTodo","textInput","useRef","useEffect","data","localStorage","getItem","JSON","parse","todos","stringify","setItem","onSubmit","e","preventDefault","current","value","uuid","ref","type","placeholder","updatedTodo","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAgBeA,EAdE,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,WACnC,OACIF,EAAKG,KAAI,SAACH,GACF,OACI,sBAAKI,UAAS,yBAAoBJ,EAAKK,UAAY,YAAc,IAAjE,UACI,cAAC,IAAD,CAAUC,SAAU,kBAAML,EAAaD,EAAKO,KAAKC,QAASR,EAAKK,UAA/D,SAA2EL,EAAKS,QAChF,cAACC,EAAA,EAAD,CAAgBN,UAAU,cAAcO,QAAS,kBAAMT,EAAWF,EAAKO,SAFCP,EAAKO,QCgEtFK,MAhEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNb,EADM,KACAc,EADA,KA0BPC,EAAYC,iBAAO,MAczB,OAZAC,qBAAU,WACR,IAAMC,EAAOC,aAAaC,QAAQ,SAC/BF,GACDJ,EAAQO,KAAKC,MAAMJ,MAErB,IAEFD,qBAAU,WACR,IAAMM,EAAQF,KAAKG,UAAUxB,GAC7BmB,aAAaM,QAAQ,QAASF,MAI9B,sBAAKhB,GAAG,MAAR,UACE,+CACA,sBAAKH,UAAU,YAAf,UACE,qBAAKA,UAAU,WAAf,SACE,uBAAMsB,SA1CO,SAACC,GACpBA,EAAEC,iBACCb,EAAUc,QAAQC,QACnBhB,EAAQ,GAAD,mBACFd,GADE,CAEL,CAACO,GAAIwB,MAAQtB,MAAOM,EAAUc,QAAQC,MAAOzB,WAAW,MAE1DU,EAAUc,QAAQC,MAAQ,KAmCtB,UACE,uBAAOE,IAAKjB,EAAWX,UAAU,eAAe6B,KAAK,OAAOC,YAAY,sBACxE,wBAAQD,KAAK,SAAS7B,UAAU,cAAhC,sBAGJ,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,kBAAf,SAGE,gDAEF,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,CAAUJ,KAAOA,EAAOC,aA3Cb,SAACM,GACpB,IAAM4B,EAAcnC,EAAKG,KAAI,SAACH,GAC5B,OAAOA,EAAKO,KAAOA,EAAZ,2BAAqBP,GAArB,IAA2BK,WAAYL,EAAKK,YAAaL,KAElEc,EAAQqB,IAuCoDjC,WApC3C,SAACK,GAClB,IAAM4B,EAAcnC,EAAKoC,QAAO,SAACpC,GAAD,OAAUA,EAAKO,KAAOA,KACtDO,EAAQqB,kBCjBGE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad0308bf.chunk.js","sourcesContent":["import { Checkbox } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nconst TodoList = ({todo, handleChange, removeTodo}) => {\r\n    return ( \r\n        todo.map((todo)=>{\r\n                return (\r\n                    <div className={`todo-list-item ${todo.completed ? 'completed' : ''}`} key={todo.id}>\r\n                        <Checkbox onChange={() => handleChange(todo.id)} checked={todo.completed}>{todo.title}</Checkbox>\r\n                        <DeleteOutlined className=\"todo-remove\" onClick={() => removeTodo(todo.id)} />\r\n                    </div>\r\n                )\r\n            }\r\n        )\r\n     );\r\n}\r\n \r\nexport default TodoList;","import { useState, useRef, useEffect } from 'react';\nimport uuid from 'react-uuid';\nimport 'antd/dist/antd.css'; \nimport './app.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  const [todo, setTodo] = useState([]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(textInput.current.value) {\n      setTodo([\n        ...todo,\n        {id: uuid(), title: textInput.current.value, completed: false }\n      ])\n      textInput.current.value = '';\n    }\n  }\n\n  const handleChange = (id) => {\n    const updatedTodo = todo.map((todo) => {\n      return todo.id === id ? {...todo, completed: !todo.completed} : todo;\n    });\n    setTodo(updatedTodo)\n  }\n\n  const removeTodo = (id) => {\n    const updatedTodo = todo.filter((todo) => todo.id !== id)\n    setTodo(updatedTodo)\n  }\n\n  const textInput = useRef(null);\n\n  useEffect(() => {\n    const data = localStorage.getItem('todos');\n    if(data) {\n      setTodo(JSON.parse(data))\n    }\n  },[]);\n// test\n  useEffect(() => {\n    const todos = JSON.stringify(todo);\n    localStorage.setItem('todos', todos)\n  })\n\n  return (\n    <div id=\"app\">\n      <header> My Todo </header>\n      <div className=\"container\">\n        <div className=\"text-box\">\n          <form onSubmit={handleSubmit}>\n            <input ref={textInput} className=\"form-control\" type=\"text\" placeholder=\"type your task...\" />\n            <button type=\"submit\" className=\"btn-default\">Add</button>\n          </form>\n        </div>\n        <div className=\"todo-box\">\n          <div className=\"todo-box-header\">\n            {/* <span>On Going</span>\n            <span>Completed</span> */}\n            <span>Todo Lists</span>\n          </div>\n          <div className=\"todo-box-body\">\n            <TodoList todo={ todo } handleChange={handleChange} removeTodo={removeTodo} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}